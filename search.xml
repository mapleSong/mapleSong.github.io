<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[小程序框架WePY]]></title>
      <url>/2018/02/27/%20%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%A1%86%E6%9E%B6WePY/</url>
      <content type="html"><![CDATA[<p>原生小程序的结构和组件化实在是不喜欢，鹅厂自家的WePY框架借鉴了Vue.js的语法风格和功能特性写起来到是方便很多。</p>
<a id="more"></a>
<h3 id="WePY项目创建"><a href="#WePY项目创建" class="headerlink" title="WePY项目创建"></a>WePY项目创建</h3><p>全局安装或更新WePY命令行工具</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install wepy-cli -g</div></pre></td></tr></table></figure>
<p>在开发目录中生成Demo开发项目</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wepy new myproject</div><div class="line"># 1.7.0之后的版本使用 wepy init standard myproject 初始化项目，使用 wepy list 查看项目模板</div></pre></td></tr></table></figure>
<p>切换至项目目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd myproject</div><div class="line">npm istall</div></pre></td></tr></table></figure>
<p>开启实时编译</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wepy build —watch</div><div class="line">|** 报错的话看是否是eslint问题  wepy.config.js -&gt; eslint: false,</div></pre></td></tr></table></figure>
<h4 id="需要注意几点"><a href="#需要注意几点" class="headerlink" title="需要注意几点"></a>需要注意几点</h4><p>1.使用<strong>微信开发者工具</strong>–&gt;<strong>添加项目</strong>，<strong>项目目录</strong>请选择<strong>dist</strong>目录。</p>
<p>2.<strong>微信开发者工具</strong>–&gt;<strong>项目</strong>–&gt;<strong>关闭ES6转ES5</strong>。</p>
<p>3.<strong>微信开发者工具</strong>–&gt;<strong>项目</strong>–&gt;<strong>关闭上传代码时样式自动补全。</strong></p>
<p>4.<strong>微信开发者工具</strong>–&gt;<strong>项目</strong>–&gt;<strong>关闭代码压缩上传</strong>。</p>
<p>小程序设置更改后如出现 编译.wxml文件错误重启软件即可</p>
<h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><p>小程序入口、页面、组件文件名的后缀为<code>.wpy</code></p>
<p>可以使用ES6、promise开发</p>
<p>事件绑定语法使用优化语法代替：</p>
<ul>
<li>原 <code>bindtap=&quot;click&quot;</code> 替换为 <code>@tap=&quot;click&quot;</code>，原<code>catchtap=&quot;click&quot;</code>替换为<code>@tap.stop=&quot;click&quot;</code>。</li>
<li>原 <code>capture-bind:tap=&quot;click&quot;</code> 替换为 <code>@tap.capture=&quot;click&quot;</code>，原<code>capture-catch:tap=&quot;click&quot;</code>替换为<code>@tap.capture.stop=&quot;click&quot;</code>。。</li>
</ul>
<h3 id="数据绑定方式"><a href="#数据绑定方式" class="headerlink" title="数据绑定方式"></a>数据绑定方式</h3><p>WePY使用脏数据检查对setData进行封装，在函数运行周期结束时执行脏数据检查，一来可以不用关心页面多次setData是否会有性能上的问题，二来可以更加简洁去修改数据实现绑定，不用重复去写setData方法。代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.title = <span class="string">'this is title'</span>;</div></pre></td></tr></table></figure>
<p>在我写项目时需要滑动触底刷新，当时用的定时器做数据获取模拟就出现了bug，这时</p>
<p><strong>需注意的是，在异步函数中更新数据的时，必须手动调用<code>$apply</code>方法，才会触发脏数据检查流程的运行</strong>。如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">setTimeout(() =&gt; &#123;</div><div class="line">    this.title = &apos;this is title&apos;;</div><div class="line">    this.$apply();</div><div class="line">&#125;, 3000);</div></pre></td></tr></table></figure>
<h3 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">wepy.request(&#123;</div><div class="line">      url: &quot;###&quot;,</div><div class="line">      method: &quot;GET&quot;,</div><div class="line">      header: &#123;header&#125;,</div><div class="line">      success: function(res) &#123;</div><div class="line">        </div><div class="line">      &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h3 id="Component组件实例"><a href="#Component组件实例" class="headerlink" title="Component组件实例"></a>Component组件实例</h3><p>对于WePY中的methods属性，因为与Vue中的使用习惯不一致，非常容易造成误解，这里需要特别强调一下：WePY中的methods属性只能声明页面wxml标签的bind、catch事件，不能声明自定义方法，这与Vue中的用法是不一致的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">// 错误示例</div><div class="line"></div><div class="line">import wepy from &apos;wepy&apos;;</div><div class="line"></div><div class="line">export default class MyComponent extends wepy.component &#123;</div><div class="line">    methods = &#123;</div><div class="line">        bindtap () &#123;</div><div class="line">            let rst = this.commonFunc();</div><div class="line">            // doSomething</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        bindinput () &#123;</div><div class="line">            let rst = this.commonFunc();</div><div class="line">            // doSomething</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        //错误：普通自定义方法不能放在methods对象中</div><div class="line">        customFunction () &#123;</div><div class="line">            return &apos;sth.&apos;;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">// 正确示例</div><div class="line"></div><div class="line">import wepy from &apos;wepy&apos;;</div><div class="line"></div><div class="line">export default class MyComponent extends wepy.component &#123;</div><div class="line">    methods = &#123;</div><div class="line">        bindtap () &#123;</div><div class="line">            let rst = this.commonFunc();</div><div class="line">            // doSomething</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">        bindinput () &#123;</div><div class="line">            let rst = this.commonFunc();</div><div class="line">            // doSomething</div><div class="line">        &#125;,</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    //正确：普通自定义方法在methods对象外声明，与methods平级</div><div class="line">    customFunction () &#123;</div><div class="line">        return &apos;sth.&apos;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>API文档：<a href="https://tencent.github.io/wepy/document.html#/" target="_blank" rel="external">https://tencent.github.io/wepy/document.html#/</a></p>
]]></content>
      
        
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2017年终总结]]></title>
      <url>/2018/01/15/2017%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>年末断断续续也写了一些觉得有些杂乱，趁着最近不忙还是要把总结完整的写一写。</p>
<a id="more"></a>
<h2 id="感恩"><a href="#感恩" class="headerlink" title="感恩"></a>感恩</h2><p>首先要说的就是感恩。在这一年，挂着十多年”学生”标签的我终于摘掉了幼稚、天真的代名词。初来乍到懵懵懂懂，大环境下有时候会感到窒息。记得刚出来实习的时候要租房落脚，来来回回找了许多中介都没有合适的房子，不是价格贵就是地方太偏。最后多亏了老姐拖同事关系给我介绍了几套房子最终顺利住到了合适的房子。北京的房价真是让人一点想法都没有，有时想想还挺羡慕老姐那个时候买房子真是血赚，但也是当时刚需买了没得说。</p>
<p>在实习期间工资低的可怜，自己也没有攒钱只能疯狂给家里打call，这才维持能吃饱穿暖的温饱生活。这期间也得到了老姨的帮忙，顺利的实习里几个月时间让我初入互联网行业。</p>
<p>总之，要感恩家人，只有ta们才能在你困难的时候帮你渡过难关。</p>
<h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>五月三号我入职了现在这家公司，当初手里拿着两家offer最终还是等来这家的通知，相对来说这家公司我觉得更能让我成长毕竟公司前端就我一人：）  </p>
<p>公司项目多，我也是忙的要死。刚过来就接了几个后台项目和新上的项目，虽然前期开发遇到了一些困难但还是咬咬牙挺了过来项目转接也算顺利。虽然加班是常态但我也尽量当天的事当天办我是极度反感拖拖拉拉的办事状态。当时距离毕业还有两个月，论文还没收工，基本上是有空就写，讲道理我这论文写得蛮走心的真的是纯手工制作，耗费大量时间去写。虽然答辩时导师问的都是一切奇葩问题但自我感觉毕设做的还是相当满意。期间还有些事需要回老家、回学校也请了不少假但也没有托工作进度还是挺顺利的吧。就这样七月份转正正式成为来京务工人员，继续搬砖继续学习。在这家公司只能靠自己，不会的查，查不到的科学上网查总之google是个好东西。这半年多学到了很多同时也知道了自己还是弱，前面的路还很长。</p>
<p>​    这才工作了半年，回想起上学的时光是真tm幸福啊。什么都不用想，摇就完了。对于工作总体来说这一年收获颇丰，也认识到了以后的方向。所以说呢，打铁还需自身硬啊。</p>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>这一年，我胖了近20斤：）我承认花自己挣的钱吃饭一点都不心疼，这菜没肉？打扰了。过年回家见谁谁说胖，照镜子看见自己自己都烦。所以在2018年新年之际在此立下flag，今年不瘦个三四十斤我回家过年。。（这是第几个flag了？？）</p>
<p>这一年学着做了几道菜，是真的难吃。可能技能点没点上吧。还有就是花销状况，刚开始完全没有这个概念基本就是月光，花的飞起，后来也渐渐意识到需要攒点钱了。新的一年打算好好攒攒钱，买东西也要节制一些。不长远打算就当个旅游资金也是蛮好的。想想以后买房压力更大，所以还是节省点花销为好。</p>
<h4 id="总而言之"><a href="#总而言之" class="headerlink" title="总而言之"></a>总而言之</h4><p>新的一年就要有新的生活态度面对接下来的一切，有些事情也要自己学会承担、负责。特别喜欢一句话：<strong>总会有一天,你会活成自己想要的模样</strong>；以上。</p>
<p>​    </p>
]]></content>
      
        
        <tags>
            
            <tag> 个人 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Gulp自动化构建工具]]></title>
      <url>/2017/06/07/gulp%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<p>Gulp.js 是基于 Node.js 构建的,利用 Node.js 流的威力,可以快速构建项目，</p>
<p>是一个自动化构建工具,开发者可以使用它在项目开发过程中自动执行常见任务。</p>
<a id="more"></a>
<h2 id="Gulp安装"><a href="#Gulp安装" class="headerlink" title="Gulp安装"></a>Gulp安装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install -g gulp   <span class="comment">// 全局安装gulp</span></div><div class="line">$ gulp -v 				     <span class="comment">// 查看gulp版本号，是否安装成功</span></div><div class="line">$ npm init 				     <span class="comment">// 创建文件夹，初始化npm(项目名称不能为gulp)</span></div><div class="line">$ npm install gulp —save-dev <span class="comment">// 当前文件夹安装本地gulp文件</span></div></pre></td></tr></table></figure>
<p>上述命令执行完成后需要再创建一个gulpfile.js文件来用来配置gulp。</p>
<h2 id="Gulp使用"><a href="#Gulp使用" class="headerlink" title="Gulp使用"></a>Gulp使用</h2><p>我使用gulp最常用的功能就是压缩css,js代码和添加css代码中兼容浏览器前缀。这三个功能分别需要安装三个gulp插件：gulp-uglify（压缩js代码）、gulp-css（压缩css代码）、gulp-autoprefixer（css兼容浏览器前缀）。所以需要通过npm来安装这三个插件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$npm install gulp-uglify --save-dev</div><div class="line">$npm install gulp-css --save-dev</div><div class="line">$npm install gulp-autoprefixer --save-dev</div></pre></td></tr></table></figure>
<p>在项目中我们需要存放我们需要压缩的代码，在项目中创建一个src文件夹，其中存放js，css文件。</p>
<p>​    |——src</p>
<p>​        |——-js</p>
<p>​             ——main.js</p>
<p>​         |——-css</p>
<p>​          ——main.css</p>
<p>​      同理我们还需要创建一个压缩代码后存放文件的文件夹。</p>
<p>​      |——–dist</p>
<p>​        |—— js</p>
<p>​        |——-css</p>
<p>​    下面就要配置gulp文件了，在刚刚创建的gulpfile.js文件中进行配置。所有配置代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"><span class="keyword">var</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>);</div><div class="line"><span class="keyword">var</span> cssMin = <span class="built_in">require</span>(<span class="string">'gulp-css'</span>);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'script'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 压缩js代码</span></div><div class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'src/js/**/*.js'</span>)</div><div class="line">    .pipe(uglify()) <span class="comment">//引用插件</span></div><div class="line">    .pipe(gulp.dest(<span class="string">'./dist/js'</span>)); <span class="comment">//存放的位置</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">gulp.task(<span class="string">'css'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'src/css/**/*.css'</span>)</div><div class="line">    .pipe(autoprefixer(&#123;  <span class="comment">//兼容性浏览器前缀添加</span></div><div class="line">        browsers:[<span class="string">'last 40 versions'</span>],<span class="comment">//版本范围</span></div><div class="line">        cascade:<span class="literal">false</span> <span class="comment">//是否美化属性值 默认是true 这里写false不需要</span></div><div class="line">    &#125;))</div><div class="line">    .pipe(cssMin()) <span class="comment">//引用插件</span></div><div class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>));<span class="comment">//存放的位置</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'script'</span>,<span class="string">'css'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'任务完成'</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//如果不需要兼容性前缀添加，直接将pipe(autoprefixer)任务这部分删除。其他同理。</span></div></pre></td></tr></table></figure>
<p>​    配置好gulp后就可以将代码存放在src中，通过命令来进行相应操作：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gulp <span class="comment">//默认全部执行</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gulp script <span class="comment">//仅压缩js代码</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gulp css <span class="comment">//仅压缩css代码</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> gulp </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript面向对象]]></title>
      <url>/2017/06/06/JavaScript%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p>new一个对象出来：）</p>
<a id="more"></a>
<h3 id="理解对象"><a href="#理解对象" class="headerlink" title="理解对象"></a>理解对象</h3><p>创建一个实例，为它添加属性和方法，如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>(); </div><div class="line">person.name = <span class="string">"Nicholas"</span>; </div><div class="line">person.age = <span class="number">29</span>; </div><div class="line">person.job = <span class="string">"Software Engineer"</span>;</div><div class="line"></div><div class="line">person.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">alert(<span class="keyword">this</span>.name); </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面的例子中名为person就是一个对象，其中有三个属性name、age、job和一个方法sayName()。</p>
<h1 id="设计原型"><a href="#设计原型" class="headerlink" title="设计原型"></a>设计原型</h1><h4 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123; &#125;</div><div class="line"></div><div class="line">Person.prototype.name = <span class="string">"Nicholas"</span>; </div><div class="line">Person.prototype.age = <span class="number">29</span>; </div><div class="line">Person.prototype.job = <span class="string">"Software Engineer"</span>; </div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	alert(<span class="keyword">this</span>.name); </div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(); </div><div class="line">person1.sayName(); <span class="comment">//"Nicholas"</span></div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</div><div class="line">person2.sayName(); <span class="comment">//"Nicholas" </span></div><div class="line">alert(person1.sayName == person2.sayName);<span class="comment">//true</span></div></pre></td></tr></table></figure>
<p>无论什么时候，只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个 prototype 属性，这个属性指向函数的原型对象。在默认情况下，所有原型对象都会自动获得一个 constructor （构造函数）属性，这个属性包含一个指向 prototype 属性所在函数的指针。就拿前面的例子来说， Person.prototype. constructor 指向 Person。而通过这个构造函数，我们还可继续为原型对象 添加其他属性和方法。</p>
<p>创建了自定义的构造函数之后，其原型对象默认只会取得 constructor 属性；至于其他方法，则 都是从 Object 继承而来的。当调用构造函数创建一个新实例后，该实例的内部将包含一个指针（内部 属性），指向构造函数的原型对象。ECMA-262 第 5 版中管这个指针叫[[Prototype]]。虽然在脚本中 没有标准的方式访问 [[Prototype]] ， 但 Firefox、Safari 和 Chrome 在每个对象上都支持一个属性 <strong>proto</strong>；而在其他实现中，这个属性对脚本则是完全不可见的。不过，要明确的真正重要的一点就 是，这个连接存在于实例与构造函数的原型对象之间，而不是存在于实例与构造函数之间。</p>
<p>以前面使用 Person 构造函数和 Person.prototype 创建实例的代码为例，下图展示了各个对 象之间的关系。</p>
<p><img src="http://or2e12z3i.bkt.clouddn.com/screenshot2.png" alt=""></p>
<h4 id="更简单、实用的原型语法"><a href="#更简单、实用的原型语法" class="headerlink" title="更简单、实用的原型语法"></a>更简单、实用的原型语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123; &#125;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">  <span class="keyword">constructor</span>:Person, //指向所在函数指针</div><div class="line">  name : "Nicholas", </div><div class="line">  age : 29, job: "Software Engineer", </div><div class="line">  sayName : function () &#123;</div><div class="line">	alert(<span class="keyword">this</span>.name); </div><div class="line">  &#125; </div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> Person();</div><div class="line"></div><div class="line">alert(friend <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">//true</span></div><div class="line">alert(friend <span class="keyword">instanceof</span> Person); <span class="comment">//true</span></div><div class="line">alert(friend.constructor == Person); <span class="comment">//true</span></div><div class="line">alert(friend.constructor == <span class="built_in">Object</span>);<span class="comment">//true</span></div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> javascript，前端 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git使用]]></title>
      <url>/2017/06/05/Git%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。</p>
<a id="more"></a>
<h4 id="Git三个状态"><a href="#Git三个状态" class="headerlink" title="Git三个状态"></a>Git三个状态</h4><p>在Git中存在三个状态：工作区、暂存区、版本状态仓库。</p>
<p>工作区：工作区是我们在本地我们可以看得到的那一部分内容。例如在本地创建的文件夹里的文件，如果修改了文件中的内容可以通过 git status来查看是否文件有修改。</p>
<p>暂存区：当我们想要上传代码到git中首先要将工作区中的文件通过命令上传至git中的暂存区：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add .   //add后面的.是将所有未最终的文件添加在缓存区中。.也可以使用-A代替，实现效果一样。</div></pre></td></tr></table></figure>
<p>版本管理仓库：当我们的代码上传到指定服务器中后也，git版本状态中会自动存留一条此次上传文件的版本状态。通过命令可查询：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git log</div></pre></td></tr></table></figure>
<p><img src="http://or2e12z3i.bkt.clouddn.com/screenshot.png" alt=""></p>
<p>其中commit是版本识别标识，我们可以通过commit码来回滚到指定版本，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git reset --hard 80919da****    //commit码只需要输入前几位即可 git会自动识别</div></pre></td></tr></table></figure>
<h4 id="通过Git将文件提交至Github"><a href="#通过Git将文件提交至Github" class="headerlink" title="通过Git将文件提交至Github"></a>通过Git将文件提交至Github</h4><p>如果文件是第一次提交至github需要将需要上传的文件通过命令git初始化，命令如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git init</div></pre></td></tr></table></figure>
<p>工作区提交到暂存区：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git add .</div></pre></td></tr></table></figure>
<p>将本次提交生成一个标识来帮助我们查看：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git commit -m”someText”</div></pre></td></tr></table></figure>
<p>与github建立连接</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git remote add origin git@github.com：yourName / songProject.git </div><div class="line">//可在github创建一个库复制其git地址</div></pre></td></tr></table></figure>
<p>提交文件至github</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<h4 id="更新文件"><a href="#更新文件" class="headerlink" title="更新文件"></a>更新文件</h4><p>更新文件基本与以上操作基本相似：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git add.</div><div class="line">$ git commit -m&quot;someText&quot;</div><div class="line">$ git push</div></pre></td></tr></table></figure>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>如果是第一次使用git需要设置用户信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config user.name &quot;username&quot;</div><div class="line">$ git config user.email &quot;user@email.com&quot;</div></pre></td></tr></table></figure>
<p>查看是否设置成功：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config user.name </div><div class="line">$ git config user.email</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript闭包]]></title>
      <url>/2017/04/12/JavaScript%E9%97%AD%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>闭包算是JavaScript经常会碰到的问题。简单的说就是函数嵌套关系到作用域链的问题。</p>
<a id="more"></a>
<p>学习了一下阮一峰大神的闭包讲解，概括起来就是变量作用域，全局和局部变量的判断。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　alert(n); </div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="keyword">return</span> f2;</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">var</span> result=f1();</div><div class="line">　　result(); <span class="comment">// 999</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　<span class="keyword">var</span> n=<span class="number">999</span>;</div><div class="line">　　　　nAdd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;n+=<span class="number">1</span>&#125;</div><div class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</div><div class="line">　　　　　　alert(n);</div><div class="line">　　　　&#125;</div><div class="line">　　　　<span class="keyword">return</span> f2;</div><div class="line">　　&#125;</div><div class="line">　　<span class="keyword">var</span> result=f1();</div><div class="line">　　result(); <span class="comment">// 999</span></div><div class="line">　　nAdd();</div><div class="line">　　result(); <span class="comment">// 1000</span></div></pre></td></tr></table></figure>
<p>在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。所以在闭包中内存中会一直保存着局部变量。会占用内存，内存消耗大，对整体性能有影响。</p>
<p><strong>eg：</strong>绑定每个<code>span</code>的<code>click</code>事件，让鼠标点击span的时候alert出对应的index    </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> spans = $(<span class="string">"#divTest span"</span>);</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; spans.length; i++) &#123;</div><div class="line">      spans[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">       alert(i);</div><div class="line">      &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>很简单的功能可是却偏偏出错了，每次alert出的值都是4，所以然者何？</p>
<p>上面代码在页面加载后就会执行，当i的值为4的时候，判断条件不成立，for循环执行完毕，但是因为每个span的onclick方法这时候为内部函数，所以i被闭包引用，内存不能被销毁，i的值会一直保持4，直到程序改变它或者所有的onclick函数销毁（主动把函数赋为null或者页面卸载）时才会被回收。</p>
<p>这样每次我们点击span的时候，onclick函数会查找i的值（作用域链是引用方式），一查等于4，然后就alert给我们了。而第二种方式是使用了一个立即执行的函数又创建了一层闭包，函数声明放在括号内就变成了表达式，后面再加上括号就是调用了，这时候把i当参数传入，函数立即执行，num保存每次i的值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> spans2 = $(<span class="string">"#divTest2 span"</span>);</div><div class="line">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; spans2.length; i++) &#123;</div><div class="line">            (<span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">                spans2[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    alert(num);</div><div class="line">                &#125;</div><div class="line">            &#125;)(i);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h2 id="逃脱"><a href="#逃脱" class="headerlink" title="逃脱"></a>逃脱</h2><p>JavaScript允许像传递任何类型的数据一样传递函数，也就是说JavaScript中的内部函数能够逃脱定义他们的外部函数。</p>
<h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> globalVar;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outerFn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Outer function"</span>);</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">innerFn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Inner function"</span>);</div><div class="line">    &#125;</div><div class="line">    globalVar = innerFn;</div><div class="line">&#125;</div><div class="line">outerFn();</div><div class="line">globalVar();</div></pre></td></tr></table></figure>
<p>调用outerFn时会修改全局变量globalVar，这时候它的引用变为innerFn，此后调用globalVar和调用innerFn一样。这时在outerFn外部直接调用innerFn仍然会导致错误，这是因为内部函数虽然通过把引用保存在全局变量中实现了逃脱，但这个函数的名字依然只存在于outerFn的作用域中。</p>
<h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>可以通过在父函数的返回值来获得内部函数引用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">outerFn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Outer function"</span>);</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">innerFn</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Inner function"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> innerFn;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> fnRef = outerFn();</div><div class="line">fnRef();</div></pre></td></tr></table></figure>
<p>这里并没有在outerFn内部修改全局变量，而是从outerFn中返回了一个对innerFn的引用。通过调用outerFn能够获得这个引用，而且这个引用可以可以保存在变量中。</p>
<h2 id="闭包的优缺点"><a href="#闭包的优缺点" class="headerlink" title="闭包的优缺点"></a>闭包的优缺点</h2><p>使用闭包主要是为了设计私有的方法和变量。闭包的优点是可以避免全局变量的污染，缺点是闭包会常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。在js中，函数即闭包，只有函数才会产生作用域的概念</p>
<p>闭包有三个特性：</p>
<blockquote>
<p>1.函数嵌套函数</p>
<p>2.函数内部可以引用外部的参数和变量</p>
<p>3.参数和变量不会被垃圾回收机制回收</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
