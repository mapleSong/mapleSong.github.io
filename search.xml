<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>服务端部署</title>
      <link href="/2020/06/25/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/"/>
      <url>/2020/06/25/%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%83%A8%E7%BD%B2/</url>
      <content type="html"><![CDATA[<p>基于Node环境服务端部署。</p><a id="more"></a><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><ol><li><p>添加源：centos提供了nginx源地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br></pre></td></tr></table></figure><p>可以通过 yum search nginx 查看是否nginx源添加成功。</p></li><li><p>安装nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># yum install -y nginx</span><br><span class="line"></span><br><span class="line">查看nginx版本 显示安装成功</span><br><span class="line"># nginx -v </span><br><span class="line">nginx version: nginx/1.14.1</span><br></pre></td></tr></table></figure></li><li><p>启动nginx并设置开机自启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># systemctl start nginx.service</span><br><span class="line"># systemctl enable nginx.service</span><br></pre></td></tr></table></figure></li><li><p>查看nginx所在位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># whereis nginx</span><br><span class="line">nginx: /usr/sbin/nginx /usr/lib64/nginx /etc/nginx /usr/share/nginx /usr/share/man/man3/nginx.3pm.gz /usr/share/man/man8/nginx.8.gz</span><br></pre></td></tr></table></figure></li></ol><p>nginx常用命令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ps</span> -ef|grep nginx     查看执行结果</span><br><span class="line">nginx -t              检查配置文件是否有语法错误</span><br><span class="line">nginx -s reload       热加载，重新加载配置文件</span><br><span class="line">nginx -s stop         快速关闭</span><br><span class="line">nginx -s quit         等待工作进程处理完成后关闭</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>nginx默认配置路径：/etc/nginx/nginx.conf</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#主要功能</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>;<span class="comment"># 工作进程的数量</span></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>; <span class="comment"># 每个工作进程连接数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">  <span class="comment"># 虚拟主机 可设置多个 </span></span><br><span class="line">  <span class="section">server</span> &#123;</span><br><span class="line">     <span class="attribute">listen</span>       <span class="number">80</span>; <span class="comment"># 服务器所开的端口 不能被其他应用占用</span></span><br><span class="line">        <span class="attribute">server_name</span>  localhost; <span class="comment"># 浏览器访问域名 可以使你的公网IP或者是域名</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">charset</span> utf-<span class="number">8</span>;</span><br><span class="line">        <span class="attribute">access_log</span>  logs/localhost.access.log  access;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 路由</span></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   www; <span class="comment"># 访问根目录</span></span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm; <span class="comment"># 入口文件</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">      <span class="comment"># 根据状态码，返回对于的错误页面</span></span><br><span class="line">      <span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line">        <span class="attribute">location</span> = /40x.html &#123;</span><br><span class="line">      <span class="attribute">root</span> /source/error_page;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">            <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">      <span class="attribute">root</span> /source/error_page;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><p>nvm全称Node Version Manager ，是 Nodejs 版本管理器，它让我们能方便的对 Nodejs 的版 本进行切换。 </p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><ol><li><p>下载nvm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash</span><br></pre></td></tr></table></figure></li><li><p>加入系统环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># source   ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>查看可用node版本并安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># nvm list-romote</span><br><span class="line">安装需要的node版本</span><br><span class="line"># nvm install  v10.16.0</span><br></pre></td></tr></table></figure><p>安装完成后查看node和npm版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># node -v</span><br><span class="line"># npm -v</span><br></pre></td></tr></table></figure></li></ol><h2 id="pm2"><a href="#pm2" class="headerlink" title="pm2"></a>pm2</h2><p>pm2全称Process Manager 2，把nodejs服务变为后台服务，统一管理（常用于服务器环境、控制台命令环境）。是具有内置负载均衡器的Node.js应用程序的生产运行时和进程管理器。 它允许您永久保持应用程序活跃，无需停机即可重新加载它们，并促进常见的Devops任务。</p><h4 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pm2 -g</span><br></pre></td></tr></table></figure><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pm2 start xx.js or pm2.json   #指定xx.js启动或根据pm2.json配置方式启动进程</span><br><span class="line">pm2 list， pm2 status #列出当前所有pm2管理列表</span><br><span class="line">pm2 stop 0  #停用指定id的服务</span><br><span class="line">pm2 delete 0  #删除指定id的服务</span><br><span class="line">pm2 restart 0 #重启指定id的服务</span><br></pre></td></tr></table></figure><h2 id="ssh免密登录"><a href="#ssh免密登录" class="headerlink" title="ssh免密登录"></a>ssh免密登录</h2><ol><li><p>在自己的操作系统上生成一对SSH KEY，如果已经存在可以不生成(公钥：<code>id_rsa.pub</code>, 私钥：<code>id_rsa</code>)</p></li><li><p>将公钥上传到服务器上</p><ul><li><p>执行 <code>ssh-keygen -t rsa</code>，生成密钥，如 <code>~/.ssh/id_rsa</code> 已存在，跳过</p></li><li><p>执行 <code>ssh-copy-id -p 22 root@YOUR_IP</code> ，输入密码将公钥复制到服务器上</p></li><li>执行 <code>ssh -p 22 root@YOUR_IP</code> ,观察是否成功</li></ul></li><li><p>服务器端转发配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#关于ssh的配置项修改</span><br><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line">AllowTcpForwarding yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line"></span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br><span class="line">#重启sshd服务</span><br><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure></li><li><p>使用秘钥配置本地的ssh</p><p>修改 ~/.ssh/config 文件(没有则创建)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host servername</span><br><span class="line">  HostName YOUR_IP</span><br><span class="line">  Port 22</span><br><span class="line">  User root</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></li></ol><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><h4 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h4><ol><li><p>创建yum源文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/yum.repos.d/mongodb-org-3.4.repo</span><br></pre></td></tr></table></figure></li><li><p>添加如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mongodb-org-3.4]  </span><br><span class="line">name=MongoDB Repository  </span><br><span class="line">baseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/  </span><br><span class="line">gpgcheck=1  </span><br><span class="line">enabled=1  </span><br><span class="line">gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc</span><br></pre></td></tr></table></figure></li><li><p>安装mongodb</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install mongodb-org</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#查看安装目录  </span><br><span class="line">whereis mongod</span><br><span class="line"></span><br><span class="line">#查看配置文件</span><br><span class="line">vim /etc/mongod.conf</span><br><span class="line"></span><br><span class="line">#按i进入编辑模式    根据自己需要进行修改bindip地址，可监听127.0.0.1或内网地址。如果需要绑定多个ip  </span><br><span class="line"></span><br><span class="line">格式：</span><br><span class="line">bindIp: 127.0.0.1,172.31.0.1</span><br></pre></td></tr></table></figure></li><li><p>启动Mongodb</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 启动mongodb</span><br><span class="line">sudo systemctl start mongod.service</span><br><span class="line"></span><br><span class="line">#开机启动</span><br><span class="line">sudo systemctl enable mongod.service</span><br><span class="line"></span><br><span class="line"># 停止mongodb</span><br><span class="line">sudo systemctl stop mongod.service</span><br><span class="line"></span><br><span class="line"># 查询 mongodb 状态：</span><br><span class="line">systemctl status mongod.service</span><br></pre></td></tr></table></figure><p>如果在不同服务器下访问或者修改端口需要配置防火墙或者阿里云服务器安全组件 默认为27017 如修改可在/etc/mongod.conf下修改端口</p></li><li><p>启动 mongo shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#查看数据库</span><br><span class="line">show dbs</span><br><span class="line"></span><br><span class="line">创建数据库</span><br><span class="line">use XXX</span><br></pre></td></tr></table></figure></li><li><p>设置允许ssh远程连接数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#设置mongod配置文件</span><br><span class="line">vim /etc/mongod.conf</span><br><span class="line"></span><br><span class="line">bindIp: 0.0.0.0</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
        <tags>
            
            <tag> 服务端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2019年终总结</title>
      <link href="/2020/03/25/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>/2020/03/25/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>不知为何，回顾这一年总是觉得过的特别快。</p><a id="more"></a><p>当写到篇回顾的时候已经是2020年的3月。这新一年开始就暴击了我们的生活，春节前疫情爆发已经打破了往日稳定有序的生活，无论在哪里都能深深的感受到人们的紧张感。虽然没有那么夸张但是也不难看出大家都透露出了与往日不同的警惕感。</p><p>回顾19年一整年，总体概括就是“高速成长“。主要体现在工作和个人技能上的成长尤为体现。这一年更多的是学了新技术，尝试了很多新东西，也深入了技术的深处，让我能非常清楚的理解到了各个环节如何使用，如何配合能达到比较完美的项目代码，我认为的完美代码就是有高复用、高组件可维护的组织结构。我一直认为如果项目代码经不起大规模的迭代这就算是不合格的代码。项目写的越多越能感受到自己写的东西就是一个艺术品会无限的去翻看代码结构和需求算法是否完美。阮一峰老师曾说过编写软件的原则：安全性&gt;可用性&gt;可维护性&gt;代码简洁&gt;性能。现实上我们绝大多数的开发者的权重比是：可用性&gt;性能&gt;可维护性&gt;代码简洁&gt;安全性，我们大多数开发者可能所在公司并没有严格的开发标准，唯一要求的就是功能实现、性能不要太差，像可维护性、代码简洁都是跟人自我约束。虽然在公司每个人独自承担各项目、项目分工也很少有交集但我一直秉承着别人接手项目不会造成看不懂、不会改的情况。说实话我算是比较在意别人感受的一个人，有些事还是要有前瞻的考虑，我不管这个项目最终还会迭代多久、会不会有人再来接手我都会按照我自己的原则去开发，我也特别希望人人都是这种想法那我们这技术圈简直就不要太舒服。</p><p>生活方面其实这一年还好，没病没灾舒坦的一年。这一年也考虑了很多，比如以后定居问题可每次思考这个问题中是没有一个好的方案，北京好是好可是现在还哪有那么容易定居。其他的地方呢也没几个觉得合适的地方，说实话年初元旦去了一趟川渝觉得那里环境还蛮好的、吃的也符合我的口味，就是总雾气蒙蒙的没见过几天大晴天。总是在心里说：别急，先在北京多发展发展，多学点东西。也是希望在这过程中能找到最终的答案吧。</p><p>这一年家人都很健康这也是让我很高兴的事，父母年纪这么大我最大的期望也就是健康了。也希望能有更多时间陪伴老家人。</p><p>新年初始，我也决定跳槽。在疫情爆发最严重的时候我毅然决然的迅速返京，我也计划好了跳槽的计划。回到北京后就开始不断的投简历，拿到了几个的offer，最终选择了一个比较合适公司。找一个满意的工作真的是实力+运气。电面的时候一个面试官问我为什么在这段疫情期间换工作，我说无论是否疫情这个因素在，机会总会有，就看能不能抓得住。也是如此，在这段不被看好的时间段我找到了还算不错的工作。我也很庆幸坚持了当时的想法。</p><p>新的一年，虽然刚开始就遇到这么严重的疫情但是前进的脚步依旧不能停止，学习成长依然是我的主要任务。希望疫情赶快结束，让大家的生活都回归正轨。希望家人能够健康，自己的工作生活都顺利。路还是要走，愿能按照自己的感觉一直走下去。</p>]]></content>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2018年终总结</title>
      <link href="/2019/02/04/2018%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>/2019/02/04/2018%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>又是一年春节，记得去年也是在大年三十前夕这个时间点来写对前一年的总结。</p><a id="more"></a><p>一年又一年只不过是人生中的某一段章节而已，回顾过去的18年来说无论是个人的生活还是工作都有很大的收获也有些许遗憾。生活就是这样总是让人后知后觉，但无论这一年怎样，我还是要感谢这一年给我的成长。</p><p> 这一年中我去了四座没有去过的城市，其中南京的苏南文化和悠闲的生活让我着实羡慕。重庆的独特风景、人文特色与美食文化让我这个北方人爱的深沉。今年我依然还会去一些没有去过的地方旅行，去一些优秀的城市了解不同地域的文化、美食和风景。旅行真的可以让人改变一些固有的想法也会迸发出新的问题去  让人思考。</p><p>这一年的工作还算顺利。更多的学习，更多的成长。和同事一起做一些新的东西为公司开发出更好的产品。接下来的一年继续学习新技术，写一个长期维护的线上个人项目，学习设计、产品相关知识。</p><p>这一年个人的生活质量持续提高，身体良好，但饮食方面还是没有节制。健身大业持续时间不长。接下来一年会认真考虑饮食和健身问题，为自己身体负责。</p><p>这一年听了三个现场、小马丁、王炸和K神。当我还在期待我最爱的A神时突然传来AVICII的离去，最喜欢的EDM音乐人这么突然的走了，每当低谷期的时候都会听A神的音乐。接下来的日子我依然会用他的音乐来感恩、激励生活。</p><p>感谢18年的自己，我依然保持一个正确的心态生活，对人也好对事也好我都不后悔所做的决定。19年我依旧尊重自己的选择，认为正确的方向去做事去学习。今年我更希望能多拿出一些勇气去接触、尝试、坚持一些新的东西。愿新的一年不忘初心，认真对待每一件事。</p>]]></content>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Taro + Dva 实战小结</title>
      <link href="/2019/01/07/Taro%20+%20Dva%20%E5%AE%9E%E6%88%98%E5%B0%8F%E7%BB%93/"/>
      <url>/2019/01/07/Taro%20+%20Dva%20%E5%AE%9E%E6%88%98%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>技术栈：React + Taro + Dva</p><p><strong>Taro </strong>是基于 Reac t语法规范的重微信小程序的框架，它同时可以完成多端适配的需求。</p><p>使用 Taro，我们可以只书写一套代码，再通过 Taro 的编译工具，将源代码分别编译出可以在不同端（微信/百度/支付宝/字节跳动小程序、H5、React-Native 等）运行的代码。</p><p><strong>Dva</strong> 是一个基于 redux 和 redux-saga 的数据流方案，然后为了简化开发体验，dva 还额外内置了 react-router 和 fetch，所以也可以理解为一个轻量级的应用框架。</p><p>这里我仅对微信小程序开发进行小结。</p><a id="more"></a><h3 id="Taro-特性"><a href="#Taro-特性" class="headerlink" title="Taro 特性"></a>Taro 特性</h3><p><strong>React 语法风格</strong></p><p>Taro遵循React语法规范，它采用与 React 一致的组件化思想，组件生命周期与 React 保持一致，同时支持使用 JSX 语法，让代码具有更丰富的表现力，使用Taro进行开发可以获得和 React 一致的开发体验。</p><p>代码示例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Taro, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@tarojs/taro'</span></span><br><span class="line"><span class="keyword">import</span> &#123; View, Button &#125; <span class="keyword">from</span> <span class="string">'@tarojs/components'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> () &#123;</span><br><span class="line">    <span class="keyword">super</span>(...arguments)</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      title: <span class="string">'首页'</span>,</span><br><span class="line">      list: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillMount () &#123;&#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount () &#123;&#125;</span><br><span class="line"></span><br><span class="line">  componentWillUpdate (nextProps, nextState) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate (prevProps, prevState) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  shouldComponentUpdate (nextProps, nextState) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// dosth</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View className=<span class="string">'index'</span>&gt;</span><br><span class="line">        &lt;View className=<span class="string">'title'</span>&gt;&#123;<span class="keyword">this</span>.state.title&#125;&lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">        &lt;View className='content'&gt;</span></span><br><span class="line"><span class="regexp">          &#123;this.state.list.map(item =&gt; &#123;</span></span><br><span class="line"><span class="regexp">            return (</span></span><br><span class="line"><span class="regexp">              &lt;View className='item'&gt;&#123;item&#125;&lt;/</span>View&gt;</span><br><span class="line">            )</span><br><span class="line">          &#125;)&#125;</span><br><span class="line">          &lt;Button className=<span class="string">'add'</span> onClick=&#123;<span class="keyword">this</span>.add&#125;&gt;添加&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>View&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>###Dva 概念</p><p><strong>数据流向</strong></p><p>数据的改变发生通常是通过用户交互行为或者浏览器行为（如路由跳转等）触发的，当此类行为会改变数据的时候可以通过 <code>dispatch</code> 发起一个 action，如果是同步行为会直接通过 <code>Reducers</code> 改变 <code>State</code>，如果是异步行为（副作用）会先触发 <code>Effects</code> 然后流向 <code>Reducers</code> 最终改变 <code>State</code>，所以在 dva 中，数据流向非常清晰简明，并且思路基本跟开源社区保持一致（也是来自于开源社区）。</p><p><img src="http://mapleSong.github.io/assets/articleImg/16/1.png" alt=""></p><h3 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g @tarojs/cli</span><br><span class="line">$ taro init myApp</span><br><span class="line">$ npm run dev:weapp</span><br><span class="line"></span><br><span class="line">$ npm install dva-cli -g</span><br><span class="line">$ npm i dva-core dva-loading --save</span><br></pre></td></tr></table></figure><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">├── .temp                  </span><br><span class="line">├── .rn_temp              </span><br><span class="line">├── dist                  </span><br><span class="line">├── config                 // Taro配置目录</span><br><span class="line">│   ├── dev.js                 // 开发时配置</span><br><span class="line">│   ├── index.js               // 默认配置</span><br><span class="line">│   └── prod.js                // 打包时配置</span><br><span class="line">├── static                 // 静态文件</span><br><span class="line">├── src                    // 源码目录</span><br><span class="line">│   ├── components             // 组件</span><br><span class="line">│   ├── models                 // redux models</span><br><span class="line">│   │   └── common.js   </span><br><span class="line">│   │   └── index.js   </span><br><span class="line">│   ├── pages                  // 页面文件目录</span><br><span class="line">│   │   └── home</span><br><span class="line">│   │       ├── index.js           // 页面逻辑</span><br><span class="line">│   │       ├── index.scss         // 页面样式</span><br><span class="line">│   │       ├── model.js           // 页面models</span><br><span class="line">│   │       └── service.js         // 页面api</span><br><span class="line">│   ├── styles            </span><br><span class="line">│   ├── utils  </span><br><span class="line">│   │   └── dva.js   //dva配置</span><br><span class="line">│   │   └── request.js   //网络请求封装</span><br><span class="line">│   ├── app.js             // 入口文件</span><br><span class="line">│   └── index.html</span><br><span class="line">├── package.json</span><br></pre></td></tr></table></figure><p><strong>dav配置</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">dva.js</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Taro <span class="keyword">from</span> <span class="string">'@tarojs/taro'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; create &#125; <span class="keyword">from</span> <span class="string">'dva-core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createLogger &#125; <span class="keyword">from</span> <span class="string">'redux-logger'</span>;</span><br><span class="line"><span class="keyword">import</span> createLoading <span class="keyword">from</span> <span class="string">'dva-loading'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app;</span><br><span class="line"><span class="keyword">let</span> store;</span><br><span class="line"><span class="keyword">let</span> dispatch;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createApp</span>(<span class="params">opt</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// redux日志</span></span><br><span class="line">  <span class="comment">// opt.onAction = [createLogger()];</span></span><br><span class="line">  app = create(opt);</span><br><span class="line">  app.use(createLoading(&#123;&#125;));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 适配支付宝小程序</span></span><br><span class="line">  <span class="keyword">if</span> (Taro.getEnv() === Taro.ENV_TYPE.ALIPAY) &#123;</span><br><span class="line">    global = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!global.registered) opt.models.forEach(<span class="function"><span class="params">model</span> =&gt;</span> app.model(model));</span><br><span class="line">  global.registered = <span class="literal">true</span>;</span><br><span class="line">  app.start();</span><br><span class="line"></span><br><span class="line">  store = app._store;</span><br><span class="line">  app.getStore = <span class="function"><span class="params">()</span> =&gt;</span> store;</span><br><span class="line"></span><br><span class="line">  dispatch = store.dispatch;</span><br><span class="line"></span><br><span class="line">  app.dispatch = dispatch;</span><br><span class="line">  <span class="keyword">return</span> app;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  createApp,</span><br><span class="line">  getDispatch() &#123;</span><br><span class="line">    <span class="keyword">return</span> app.dispatch;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>入口导入dva</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.js</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dva <span class="keyword">from</span> <span class="string">'./utils/dva'</span></span><br><span class="line"><span class="keyword">const</span> dvaApp = dva.createApp(&#123;</span><br><span class="line">  initialState: &#123;&#125;,</span><br><span class="line">  models: models,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> store = dvaApp.getStore();</span><br></pre></td></tr></table></figure><p><strong>封装request</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> Taro <span class="keyword">from</span> <span class="string">'@tarojs/taro'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// const request_data = &#123;</span></span><br><span class="line"><span class="comment">//   platform: 'wap',</span></span><br><span class="line"><span class="comment">//   rent_mode: 2,</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseUrl = <span class="string">'https://xxxx.com/api/'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (options = &#123; <span class="attr">method</span>: <span class="string">'GET'</span>, <span class="attr">data</span>: &#123;&#125; &#125;) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> Taro.request(&#123;</span><br><span class="line">    url: baseUrl + options.url,</span><br><span class="line">    data: &#123;</span><br><span class="line">      ...options.data</span><br><span class="line">    &#125;,</span><br><span class="line">    header: &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    method: options.method.toUpperCase(),</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; statusCode, data &#125; = res;</span><br><span class="line">    <span class="keyword">if</span> (statusCode &gt;= <span class="number">200</span> &amp;&amp; statusCode &lt; <span class="number">300</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (data.msg !== <span class="string">'success'</span>) &#123;</span><br><span class="line">        Taro.showToast(&#123;</span><br><span class="line">          title: <span class="string">`<span class="subst">$&#123;res.data.msg&#125;</span>~`</span> || res.data.code,</span><br><span class="line">          icon: <span class="string">'none'</span>,</span><br><span class="line">          mask: <span class="literal">true</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> data;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`网络请求错误，状态码<span class="subst">$&#123;statusCode&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>创建page</strong></p><p>用一个累加器的例子演示taro与dav的配合，通过请求接口返回值判断是否允许操作累加。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//│   ├── pages                 </span></span><br><span class="line"><span class="comment">//│   │   └── home</span></span><br><span class="line"><span class="comment">//│   │       ├── index.js           </span></span><br><span class="line"><span class="comment">//│   │       ├── index.scss        </span></span><br><span class="line"><span class="comment">//│   │       ├── model.js          </span></span><br><span class="line"><span class="comment">//│   │       └── service.js  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//service.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Request <span class="keyword">from</span> <span class="string">'../../utils/request'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> optionAllow = <span class="function"><span class="params">data</span> =&gt;</span> Request(&#123;</span><br><span class="line">  url: <span class="string">'xxx'</span>,</span><br><span class="line">  method: <span class="string">'GET'</span>,</span><br><span class="line">  data</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Taro, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@tarojs/taro'</span></span><br><span class="line"><span class="keyword">import</span> &#123; View, Button &#125; <span class="keyword">from</span> <span class="string">'@tarojs/components'</span></span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'@tarojs/redux'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> lineApi <span class="keyword">from</span> <span class="string">'./server'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.scss'</span></span><br><span class="line"></span><br><span class="line">@connect(<span class="function">(<span class="params">&#123; home &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">  ...home</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  config = &#123;</span><br><span class="line">    navigationBarTitleText: <span class="string">'首页'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">      <span class="keyword">super</span>(...arguments)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  handleAddButton()&#123;</span><br><span class="line">      <span class="keyword">this</span>.props.dispatch(&#123;</span><br><span class="line">          type:<span class="string">'home/handleAddNumber'</span></span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render()&#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; amount &#125; = <span class="keyword">this</span>.props</span><br><span class="line">      <span class="keyword">return</span>(</span><br><span class="line">          &lt;View&gt;</span><br><span class="line">              &lt;View&gt;总数：&#123; amount &#125;&lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">              &lt;Button onClick = &#123; this.handleAddButton &#125; &gt;+&lt;/</span>Button&gt;</span><br><span class="line">          &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">      )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//model.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> homeApi <span class="keyword">from</span> <span class="string">'./server'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    namespace:<span class="string">'home'</span>,</span><br><span class="line">    state:&#123;</span><br><span class="line">        amount:<span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    effects:&#123;</span><br><span class="line">        *handleAddNumber(_,&#123;call,put,select&#125;)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; amount &#125; = <span class="keyword">yield</span> select( <span class="function"><span class="params">state</span> =&gt;</span> state.home )</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">yield</span> call(homeApi.optionAllow,&#123;<span class="attr">status</span>:<span class="string">'add'</span>&#125;)</span><br><span class="line">            <span class="keyword">if</span>(!res.data) <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">yield</span> put(&#123;</span><br><span class="line">                type:<span class="string">'save'</span>,</span><br><span class="line">                payload:&#123;</span><br><span class="line">                    amount: amount + <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">        </span><br><span class="line">    reducers:&#123;</span><br><span class="line">        save(state, &#123; payload &#125;)&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123; ...state, ...payload &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Taro </tag>
            
            <tag> Dva </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue按需加载ECharts模块</title>
      <link href="/2018/06/10/Vue%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BDECharts%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/06/10/Vue%E6%8C%89%E9%9C%80%E5%8A%A0%E8%BD%BDECharts%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<p><img src="../assets/coverImg/echarts.png" alt=""></p><p>Vue按需加载ECharts模块</p><a id="more"></a><p>当我们只需要ECharts的线和工具提示模块的时候，我们会这么写：</p><p>注：用 require 不用 import 引入是因为 import 需要详细的路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'echarts/lib/echarts'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'echarts/lib/chart/line'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'echarts/lib/component/tooltip'</span></span><br></pre></td></tr></table></figure><p>当引入了这个插件后，我们只需要这个写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eslint-disable-next-line</span></span><br><span class="line"><span class="keyword">const</span> echarts = equire([</span><br><span class="line">  <span class="string">'line'</span>,</span><br><span class="line">  <span class="string">'tooltip'</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>这个插件会自动帮我们转化为上面的形式</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-plugin-equire -D</span><br></pre></td></tr></table></figure><p>然后，在<code>.babelrc</code>文件中添加该插件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">   <span class="comment">// other plugins</span></span><br><span class="line">   ...</span><br><span class="line">   </span><br><span class="line">    <span class="string">"equire"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>新建一个文件initEcharts.js用于初始化ECharts模块，然后编写如下代码：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@/src/utils/initEcharts.js</span><br><span class="line"></span><br><span class="line"><span class="comment">// eslint-disable-next-line</span></span><br><span class="line"><span class="keyword">const</span> echarts = equire([</span><br><span class="line">  <span class="string">'line'</span>,</span><br><span class="line">  <span class="string">'tooltip'</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> echarts</span><br></pre></td></tr></table></figure><p>在需要用到echarts的地方引入上面的initEcharts.js文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'@/src/utils/initEcharts'</span></span><br></pre></td></tr></table></figure><p>这样，最后打包出来的文件就只有包含ECharts的核心模块和line / bar两个图表模块</p><p>Echarts可以按需引入的模块列表见 <a href="https://github.com/ecomfe/echarts/blob/master/index.js" target="_blank" rel="noopener">https://github.com/ecomfe/echarts/blob/master/index.js</a></p>]]></content>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript代码库(封装)</title>
      <link href="/2018/05/12/JavaScript%E4%BB%A3%E7%A0%81%E5%BA%93(%E5%B0%81%E8%A3%85)/"/>
      <url>/2018/05/12/JavaScript%E4%BB%A3%E7%A0%81%E5%BA%93(%E5%B0%81%E8%A3%85)/</url>
      <content type="html"><![CDATA[<p>常用工具库，持续更新。。。</p><a id="more"></a><h4 id="去除字符串空格"><a href="#去除字符串空格" class="headerlink" title="去除字符串空格"></a>去除字符串空格</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//去除空格  type 1-所有空格  2-前后空格  3-前空格 4-后空格</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">str,type</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (type)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:<span class="keyword">return</span> str.replace(<span class="regexp">/\s+/g</span>,<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:<span class="keyword">return</span> str.replace(<span class="regexp">/(^\s*)|(\s*$)/g</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:<span class="keyword">return</span> str.replace(<span class="regexp">/(^\s*)/g</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:<span class="keyword">return</span> str.replace(<span class="regexp">/(\s*$)/g</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">default</span>:<span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字母大小写切换"><a href="#字母大小写切换" class="headerlink" title="字母大小写切换"></a>字母大小写切换</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*type</span></span><br><span class="line"><span class="comment">1:首字母大写   </span></span><br><span class="line"><span class="comment">2：首页母小写</span></span><br><span class="line"><span class="comment">3：大小写转换</span></span><br><span class="line"><span class="comment">4：全部大写</span></span><br><span class="line"><span class="comment">5：全部小写</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="comment">//changeCase('asdasd',1)</span></span><br><span class="line"><span class="comment">//Asdasd</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeCase</span>(<span class="params">str,type</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ToggleCase</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> itemText = <span class="string">""</span></span><br><span class="line">        str.split(<span class="string">""</span>).forEach(</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="regexp">/^([a-z]+)/</span>.test(item)) &#123;</span><br><span class="line">                    itemText += item.toUpperCase();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (<span class="regexp">/^([A-Z]+)/</span>.test(item)) &#123;</span><br><span class="line">                    itemText += item.toLowerCase();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    itemText += item;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="keyword">return</span> itemText;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> str.replace(<span class="regexp">/^(\w)(\w+)/</span>, <span class="function"><span class="keyword">function</span> (<span class="params">v, v1, v2</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> v1.toUpperCase() + v2.toLowerCase();</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> str.replace(<span class="regexp">/^(\w)(\w+)/</span>, <span class="function"><span class="keyword">function</span> (<span class="params">v, v1, v2</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> v1.toLowerCase() + v2.toUpperCase();</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> ToggleCase(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            <span class="keyword">return</span> str.toUpperCase();</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="keyword">return</span> str.toLowerCase();</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串循环复制"><a href="#字符串循环复制" class="headerlink" title="字符串循环复制"></a>字符串循环复制</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//repeatStr(str-&gt;字符串, count-&gt;次数)</span></span><br><span class="line"><span class="comment">//repeatStr('123',3)</span></span><br><span class="line"><span class="comment">//"123123123"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">repeatStr</span>(<span class="params">str, count</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> text = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        text += str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串替换(字符串,要替换的字符,替换成什么)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceAll</span>(<span class="params">str,AFindText,ARepText</span>)</span>&#123;</span><br><span class="line">　　　raRegExp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(AFindText,<span class="string">"g"</span>);</span><br><span class="line">　　　<span class="keyword">return</span> str.replace(raRegExp,ARepText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="手机号替换-等"><a href="#手机号替换-等" class="headerlink" title="手机号替换*等"></a>手机号替换*等</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//replaceStr(字符串,字符格式, 替换方式,替换的字符（默认*）)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceStr</span>(<span class="params">str, regArr, type,ARepText</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> regtext = <span class="string">''</span>, Reg = <span class="literal">null</span>,replaceText=ARepText||<span class="string">'*'</span>;</span><br><span class="line">    <span class="comment">//replaceStr('18819322663',[3,5,3],0)</span></span><br><span class="line">    <span class="comment">//188*****663</span></span><br><span class="line">    <span class="comment">//repeatStr是在上面定义过的（字符串循环复制），大家注意哦</span></span><br><span class="line">    <span class="keyword">if</span> (regArr.length === <span class="number">3</span> &amp;&amp; type === <span class="number">0</span>) &#123;</span><br><span class="line">        regtext = <span class="string">'(\\w&#123;'</span> + regArr[<span class="number">0</span>] + <span class="string">'&#125;)\\w&#123;'</span> + regArr[<span class="number">1</span>] + <span class="string">'&#125;(\\w&#123;'</span> + regArr[<span class="number">2</span>] + <span class="string">'&#125;)'</span></span><br><span class="line">        Reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(regtext);</span><br><span class="line">        <span class="keyword">var</span> replaceCount = repeatStr(replaceText, regArr[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> str.replace(Reg, <span class="string">'$1'</span> + replaceCount + <span class="string">'$2'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//replaceStr('asdasdasdaa',[3,5,3],1)</span></span><br><span class="line">    <span class="comment">//***asdas***</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (regArr.length === <span class="number">3</span> &amp;&amp; type === <span class="number">1</span>) &#123;</span><br><span class="line">        regtext = <span class="string">'\\w&#123;'</span> + regArr[<span class="number">0</span>] + <span class="string">'&#125;(\\w&#123;'</span> + regArr[<span class="number">1</span>] + <span class="string">'&#125;)\\w&#123;'</span> + regArr[<span class="number">2</span>] + <span class="string">'&#125;'</span></span><br><span class="line">        Reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(regtext);</span><br><span class="line">        <span class="keyword">var</span> replaceCount1 = repeatSte(replaceText, regArr[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">var</span> replaceCount2 = repeatSte(replaceText, regArr[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">return</span> str.replace(Reg, replaceCount1 + <span class="string">'$1'</span> + replaceCount2)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//replaceStr('1asd88465asdwqe3',[5],0)</span></span><br><span class="line">    <span class="comment">//*****8465asdwqe3</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (regArr.length === <span class="number">1</span> &amp;&amp; type == <span class="number">0</span>) &#123;</span><br><span class="line">        regtext = <span class="string">'(^\\w&#123;'</span> + regArr[<span class="number">0</span>] +  <span class="string">'&#125;)'</span></span><br><span class="line">        Reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(regtext);</span><br><span class="line">        <span class="keyword">var</span> replaceCount = repeatSte(replaceText, regArr[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> str.replace(Reg, replaceCount)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//replaceStr('1asd88465asdwqe3',[5],1,'+')</span></span><br><span class="line">    <span class="comment">//"1asd88465as+++++"</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (regArr.length === <span class="number">1</span> &amp;&amp; type == <span class="number">1</span>) &#123;</span><br><span class="line">        regtext = <span class="string">'(\\w&#123;'</span> + regArr[<span class="number">0</span>] +  <span class="string">'&#125;$)'</span></span><br><span class="line">        Reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(regtext);</span><br><span class="line">        <span class="keyword">var</span> replaceCount = repeatSte(replaceText, regArr[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> str.replace(Reg, replaceCount)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="检测密码强度"><a href="#检测密码强度" class="headerlink" title="检测密码强度"></a>检测密码强度</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//checkPwd('12asdASAD')</span></span><br><span class="line"><span class="comment">//3(强度等级为3)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPwd</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nowLv = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (str.length &lt; <span class="number">6</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> nowLv</span><br><span class="line">    &#125;</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/[0-9]/</span>.test(str)) &#123;</span><br><span class="line">        nowLv++</span><br><span class="line">    &#125;</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/[a-z]/</span>.test(str)) &#123;</span><br><span class="line">        nowLv++</span><br><span class="line">    &#125;</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/[A-Z]/</span>.test(str)) &#123;</span><br><span class="line">        nowLv++</span><br><span class="line">    &#125;</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/[\.|-|_]/</span>.test(str)) &#123;</span><br><span class="line">        nowLv++</span><br><span class="line">    &#125;</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">return</span> nowLv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="随机码"><a href="#随机码" class="headerlink" title="随机码"></a>随机码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//count取值范围0-36</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//randomNumber(10)</span></span><br><span class="line"><span class="comment">//"2584316588472575"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//randomNumber(14)</span></span><br><span class="line"><span class="comment">//"9b405070dd00122640c192caab84537"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Math.random().toString(36).substring(2);</span></span><br><span class="line"><span class="comment">//"83vhdx10rmjkyb9"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomNumber</span>(<span class="params">count</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">Math</span>.random().toString(count).substring(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找字符串"><a href="#查找字符串" class="headerlink" title="查找字符串"></a>查找字符串</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countStr</span> (<span class="params">str,strSplit</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.split(strSplit).length<span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> strTest=<span class="string">'sad44654blog5a1sd67as9dablog4s5d16zxc4sdweasjkblogwqepaskdkblogahseiuadbhjcibloguyeajzxkcabloguyiwezxc967'</span></span><br><span class="line"><span class="comment">//countStr(strTest,'blog')</span></span><br><span class="line"><span class="comment">//6</span></span><br></pre></td></tr></table></figure><h4 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cookie</span></span><br><span class="line"><span class="comment">//设置cookie</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">name,value,iDay</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oDate=<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    oDate.setDate(oDate.getDate()+iDay);</span><br><span class="line">    <span class="built_in">document</span>.cookie=name+<span class="string">'='</span>+value+<span class="string">';expires='</span>+oDate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取cookie</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr=<span class="built_in">document</span>.cookie.split(<span class="string">'; '</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> arr2=arr[i].split(<span class="string">'='</span>);</span><br><span class="line">        <span class="keyword">if</span>(arr2[<span class="number">0</span>]==name)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> arr2[<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除cookie</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeCookie</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    setCookie(name,<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Storage = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">key, value, expireSeconds</span>)</span>&#123;</span><br><span class="line">      localStorage[key] = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        value: value, </span><br><span class="line">        expired: expireSeconds===<span class="literal">undefined</span>?<span class="literal">undefined</span>:<span class="built_in">Date</span>.now() + <span class="number">1000</span>*expireSeconds</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(localStorage[key] === <span class="literal">undefined</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> o = <span class="built_in">JSON</span>.parse(localStorage[key])</span><br><span class="line">      <span class="keyword">if</span>(o.expired === <span class="literal">undefined</span> || <span class="built_in">Date</span>.now() &lt; o.expired)&#123;</span><br><span class="line">        <span class="keyword">return</span> o.value</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> localStorage[key]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">Storage.set(<span class="string">'name'</span>, <span class="string">'sss’) </span></span><br><span class="line"><span class="string">Storage.set('</span>age<span class="string">', 2, 30) ; //设置 name 字段存储的值为'</span>sss’</span><br><span class="line">Storage.set(<span class="string">'teachers'</span>, [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>], <span class="number">60</span>) </span><br><span class="line"></span><br><span class="line">Storage.get(<span class="string">'name'</span>)   <span class="comment">// ‘sss’</span></span><br><span class="line">Storage.get(<span class="string">'age'</span>)     <span class="comment">//  如果不超过30秒，返回数字类型的2；如果超过30秒，返回 undefined，并且 localStorage 里清除 age 字段</span></span><br><span class="line">Storage.get(<span class="string">'teachers'</span>)  <span class="comment">//如果不超过60秒，返回数组； 如果超过60秒，返回 undefined，并且 localStorage 里清除 teachers 字段</span></span><br></pre></td></tr></table></figure><h4 id="Date日期时间部分"><a href="#Date日期时间部分" class="headerlink" title="Date日期时间部分"></a>Date日期时间部分</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//到某一个时间的倒计时</span></span><br><span class="line"><span class="comment">//getEndTime('2017/7/22 16:0:0')</span></span><br><span class="line"><span class="comment">//"剩余时间6天 2小时 28 分钟20 秒"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getEndTime</span>(<span class="params">endTime</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> startDate=<span class="keyword">new</span> <span class="built_in">Date</span>();  <span class="comment">//开始时间，当前时间</span></span><br><span class="line">    <span class="keyword">var</span> endDate=<span class="keyword">new</span> <span class="built_in">Date</span>(endTime); <span class="comment">//结束时间，需传入时间参数</span></span><br><span class="line">    <span class="keyword">var</span> t=endDate.getTime()-startDate.getTime();  <span class="comment">//时间差的毫秒数</span></span><br><span class="line">    <span class="keyword">var</span> d=<span class="number">0</span>,h=<span class="number">0</span>,m=<span class="number">0</span>,s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(t&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">      d=<span class="built_in">Math</span>.floor(t/<span class="number">1000</span>/<span class="number">3600</span>/<span class="number">24</span>);</span><br><span class="line">      h=<span class="built_in">Math</span>.floor(t/<span class="number">1000</span>/<span class="number">60</span>/<span class="number">60</span>%<span class="number">24</span>);</span><br><span class="line">      m=<span class="built_in">Math</span>.floor(t/<span class="number">1000</span>/<span class="number">60</span>%<span class="number">60</span>);</span><br><span class="line">      s=<span class="built_in">Math</span>.floor(t/<span class="number">1000</span>%<span class="number">60</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"剩余时间"</span>+d+<span class="string">"天 "</span>+h+<span class="string">"小时 "</span>+m+<span class="string">" 分钟"</span>+s+<span class="string">" 秒"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript Class的基本语法</title>
      <link href="/2018/05/05/JavaScript%20Class%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/05/05/JavaScript%20Class%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>在ES6中的Class语法，并不是真正的以类为基础(class-base)的新物件导向，根本上还是以原型为基础(prototype-based)，它只是个语法糖。之所以加入Class的目的并不是要建立一个新模型而是为了提供更为简洁的语法来继承。目的就是提供一个让开发者可选择的新语法导向。</p><a id="more"></a><hr><h3 id="ES6之前"><a href="#ES6之前" class="headerlink" title="ES6之前"></a>ES6之前</h3><p>创建一个造构造函数，然后new实例化这个函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shirt</span> (<span class="params">color,size</span>)</span>&#123;</span><br><span class="line"><span class="keyword">this</span>.color = color</span><br><span class="line">    <span class="keyword">this</span>.size = size</span><br><span class="line">&#125;</span><br><span class="line">shirt.prototype.pick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`this shirt color is <span class="subst">$&#123;<span class="keyword">this</span>.color&#125;</span>,size is <span class="subst">$&#123;<span class="keyword">this</span>.size&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> shop = <span class="keyword">new</span> shirt(<span class="string">'red'</span>,<span class="string">'xl'</span>)</span><br><span class="line">shop.pick()</span><br></pre></td></tr></table></figure><h3 id="Class介绍"><a href="#Class介绍" class="headerlink" title="Class介绍"></a>Class介绍</h3><h4 id="类声明"><a href="#类声明" class="headerlink" title="类声明"></a>类声明</h4><p>定义一个类的一种方法是使用一个<strong>类声明</strong>。要声明一个类，要使用带有<code>class</code>关键字的类名：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(height, width) &#123;</span><br><span class="line">    <span class="keyword">this</span>.height = height;</span><br><span class="line">    <span class="keyword">this</span>.width = width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>函数声明</strong>和<strong>类声明</strong>之间的一个重要区别是函数声明会提升，类声明不会。你首先需要声明你的类，然后访问它，否则像下面的代码会抛出一个error。</p><h4 id="用原型和静态方法包装"><a href="#用原型和静态方法包装" class="headerlink" title="用原型和静态方法包装"></a>用原型和静态方法包装</h4><p>类相当于实例的原型， 所有在类中定义的方法， 都会被实例继承。 如果在一个方法前， 加上static关键字， 就表示该方法不会被实例继承， 而是直接通过类来调用， 这就称为“ 静态方法”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> classMethod() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'hello'</span>;</span><br><span class="line">&#125;</span><br><span class="line">    classMod()&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'hi'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">Foo.classMethod() <span class="comment">// 'hello'</span></span><br><span class="line">Foo.classMod() <span class="comment">//"TypeError: Foo.classMod is not a function</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Foo();</span><br><span class="line">foo.classMethod() <span class="comment">// TypeError: foo.classMethod is not a function</span></span><br><span class="line">foo.classMod() <span class="comment">//'hi'</span></span><br></pre></td></tr></table></figure><h4 id="使用-extends-创建子类"><a href="#使用-extends-创建子类" class="headerlink" title="使用 extends 创建子类"></a>使用 <code>extends</code> 创建子类</h4><p><code>extends</code>关键字在类声明或类表达式中用于创建一个类作为另一个类的一个子类。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123; </span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  speak() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' makes a noise.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  speak() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' barks.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> Dog(<span class="string">'Mitzie'</span>);</span><br><span class="line"><span class="comment">// 'Mitzie barks.'</span></span><br><span class="line">d.speak();</span><br></pre></td></tr></table></figure><p>如果子类中存在构造函数，则需要在使用“this”之前首先调用 super() 也可以扩展传统的基于函数的“类”：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Animal</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;  </span><br><span class="line">&#125;</span><br><span class="line">Animal.prototype.speak = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' makes a noise.'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  speak() &#123;</span><br><span class="line">    <span class="keyword">super</span>.speak();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' barks.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> Dog(<span class="string">'Mitzie'</span>);</span><br><span class="line"><span class="comment">// Mitzie makes a noise.</span></span><br><span class="line">d.speak();</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript Await与Async</title>
      <link href="/2018/04/20/JavaScript%20Await%E4%B8%8EAsync/"/>
      <url>/2018/04/20/JavaScript%20Await%E4%B8%8EAsync/</url>
      <content type="html"><![CDATA[<p>Promise已经初步的解决了回调地域，但是蛋疼的then()一样会令人窒息。那么有没有更好的方案呢？答案就是ES7的async/await。async/await应该是目前较完美的异步方案了</p><a id="more"></a><hr><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> PromiseDemo = <span class="function"><span class="keyword">function</span>(<span class="params">time</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            resolve()</span><br><span class="line">        &#125;,time)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> toStart = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'start'</span>)</span><br><span class="line">    <span class="keyword">await</span> PromiseDemo(<span class="number">300</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'end'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">toStart()</span><br></pre></td></tr></table></figure><p>控制台先输出’start’, 300ms后输出’end’。</p><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ol><li>async 表示<code>这是一个async函数</code>，<code>await只能用在这个函数里面</code>。</li><li>await 表示在这里<code>等待promise返回结果</code>了，再继续执行。</li><li>await 后面跟着的<code>应该是一个promise对象</code>（当然，其他返回值也没关系，只是会立即执行，不过那样就没有意义了…）</li></ol><h3 id="获得返回值"><a href="#获得返回值" class="headerlink" title="获得返回值"></a>获得返回值</h3><p>await等待的虽然是promise对象，但不必写<code>.then(..)</code>，直接可以得到返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> PromiseDemo = <span class="function"><span class="keyword">function</span>(<span class="params">time</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            resolve(<span class="string">'ok'</span>)</span><br><span class="line">        &#125;,time)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> toStart = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> PromiseDemo(<span class="number">300</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(result) <span class="comment">// 'ok’</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">toStart()</span><br></pre></td></tr></table></figure><h3 id="捕捉错误"><a href="#捕捉错误" class="headerlink" title="捕捉错误"></a>捕捉错误</h3><p>既然<code>.then(..)</code>不用写了，那么<code>.catch(..)</code>也不用写，可以直接用标准的<code>try catch</code>语法捕捉错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> PromiseDemo = <span class="function"><span class="keyword">function</span>(<span class="params">time</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">            reject(<span class="string">'error'</span>) <span class="comment">//返回错误</span></span><br><span class="line">        &#125;,time)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> toStart = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">'start'</span>);</span><br><span class="line"><span class="keyword">let</span> result = <span class="keyword">await</span> PromiseDemo(<span class="number">300</span>)</span><br><span class="line"><span class="comment">//以下代码不会被执行('end')</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'end'</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(err)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(err) <span class="comment">// 捕捉 `error`</span></span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">toStart()</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git进阶-分支</title>
      <link href="/2018/03/26/Git%E8%BF%9B%E9%98%B6-%E5%88%86%E6%94%AF/"/>
      <url>/2018/03/26/Git%E8%BF%9B%E9%98%B6-%E5%88%86%E6%94%AF/</url>
      <content type="html"><![CDATA[<p><img src="../assets/coverImg/git.png" alt=""></p><p>为什么要创建分支？</p><a id="more"></a><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>假如我们开发完成了一个项目并且已经上线，接下来开始迭代开发。如果线上的项目出现了一个严重的bug，这就需要我们放下手头的开发去解决这个bug然后再发布一个新版本。如果在线上修改的话并不现实，如果操作失误会造成更大的损失，这时我们就需要用的git的分支来解决这个问题。</p><p>如下所示：</p><p><img src="http://mapleSong.github.io/assets/articleImg/15/1.png" alt="&#39;x&#39;"></p><p>master是项目代码的主干，所有最终上线的代码都在master上，从v1.0版本一直优化到v1.3版本，在v1.3版本出现bug，这时我们就要在v1.3这个版本创建一个分支debug分支，在这个分支上去修复bug。修复完成后将v1.5版本合并到master主分支v2.1版本上即可，这样接下来就可以继续迭代开发。</p><h3 id="分支的创建"><a href="#分支的创建" class="headerlink" title="分支的创建"></a>分支的创建</h3><p>首先查看一下项目提交记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br></pre></td></tr></table></figure><p><img src="http://mapleSong.github.io/assets/articleImg/15/2.png" alt=""></p><p>假如项目在v1.4版本中有bug需要进行处理，那么我们就要在第三次提交的v1.4版本创建一个修复版本进行修复。</p><p>我们要切换到第三次提交的版本上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout 73821029954db497bdc0373242df882405479b97</span><br></pre></td></tr></table></figure><p><img src="http://mapleSong.github.io/assets/articleImg/15/3.png" alt=""></p><p>切换成功后开始建立分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch developer(分支名称)</span><br></pre></td></tr></table></figure><p>查询是否创建成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch</span><br></pre></td></tr></table></figure><p><img src="http://mapleSong.github.io/assets/articleImg/15/4.png" alt=""></p><p>developer存在说明创建成功。</p><p>接下来我们切换到developer分支上进行开发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout developer</span><br></pre></td></tr></table></figure><p>当我们将bug修复完成后进行提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m&quot;developer分支的第一次提交&quot;</span><br><span class="line">//确定一下是否提交成功</span><br><span class="line">$ git log</span><br></pre></td></tr></table></figure><h3 id="分支的合并"><a href="#分支的合并" class="headerlink" title="分支的合并"></a>分支的合并</h3><p>我们先切换到主分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br></pre></td></tr></table></figure><p>然后在进行合并</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge developer</span><br></pre></td></tr></table></figure><p><img src="http://mapleSong.github.io/assets/articleImg/15/5.png" alt=""></p><p>合并成功</p><p>如果以后不打算在使用这个分支了,接下来就可以把这个分支删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -D developer</span><br></pre></td></tr></table></figure><p>在查看一下确认一下是否删除成功</p><p><img src="http://mapleSong.github.io/assets/articleImg/15/6.png" alt=""></p><p>这样整套流程就已经完成了。</p>]]></content>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Promise解析</title>
      <link href="/2018/03/26/Promise%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/03/26/Promise%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>Promise的产生就是为了解决<strong>回调地域</strong>的问题，当写了很多回调逻辑就很难搞清楚。利用Promise的链式调用就会清晰很多。</p><a id="more"></a><h3 id="简单的例子"><a href="#简单的例子" class="headerlink" title="简单的例子"></a>简单的例子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//假设和朋友去看电影，在网上买票的例子：</span></span><br><span class="line"><span class="keyword">const</span>  SeeAMovie = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ticket)&#123;</span><br><span class="line">           <span class="comment">//买到票</span></span><br><span class="line">          resolve(<span class="string">'nice'</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">           <span class="comment">//没买到票</span></span><br><span class="line">  reject(<span class="string">'sad'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//无论买没买到要告诉朋友结果</span></span><br><span class="line">SeeAMovie.then(</span><br><span class="line">    res =&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'买到票了'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    reason =&gt;&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'票卖光了'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1秒钟之后输出 fn1, 再过1秒输出 fn2, 再过1秒输出 fn3 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'fn1...'</span>)</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;, <span class="number">1000</span>)    </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'fn2...'</span>)</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;, <span class="number">1000</span>)    </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'fn3...'</span>)</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;, <span class="number">1000</span>)    </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onerror</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'error'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn1().then(fn2).then(fn3).catch(onerror)</span><br></pre></td></tr></table></figure><p><strong>Promise有几个静态方法，无需实例化既可使用</strong></p><ol><li>Promise.all() (传入一个Promise数组, 等待所有代码完成, 或第一个代码失败)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  funA = <span class="string">'test'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>  funB = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">setTimeOut(<span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">        resolve(<span class="string">'1000'</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>  funC = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">setTimeOut(<span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">        resolve(<span class="string">'2000'</span>)</span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([funA,funB,funC]).then(<span class="function"><span class="params">result</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">     <span class="comment">// 2秒后打印 ['test', '1000', '2000'] </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="2"><li>Promise.race() (传入一个promise数组，当其中一个完成或失败，则采用该promise值)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  funA = <span class="string">'test'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>  funB = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">setTimeOut(<span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">        resolve(<span class="string">'1000'</span>)</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span>  funC = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">setTimeOut(<span class="function"><span class="params">()</span> =&gt;</span>&#123;</span><br><span class="line">        resolve(<span class="string">'2000'</span>)</span><br><span class="line">&#125;,<span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([funA,funB,funC]).then(<span class="function"><span class="params">result</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result)</span><br><span class="line">     <span class="comment">// 2秒后打印 ['test', '1000', '2000'] </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>小程序框架WePY</title>
      <link href="/2018/02/27/%20%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%A1%86%E6%9E%B6WePY/"/>
      <url>/2018/02/27/%20%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%A1%86%E6%9E%B6WePY/</url>
      <content type="html"><![CDATA[<p>原生小程序的结构和组件化实在是不喜欢，鹅厂自家的WePY框架借鉴了Vue.js的语法风格和功能特性写起来到是方便很多，但也有深坑。</p><a id="more"></a><h3 id="WePY项目创建"><a href="#WePY项目创建" class="headerlink" title="WePY项目创建"></a>WePY项目创建</h3><p>全局安装或更新WePY命令行工具</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install wepy-cli -g</span><br></pre></td></tr></table></figure><p>在开发目录中生成Demo开发项目</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wepy <span class="keyword">new</span> myproject</span><br><span class="line"># 1.7.0之后的版本使用 wepy init standard myproject 初始化项目，使用 wepy list 查看项目模板</span><br></pre></td></tr></table></figure><p>切换至项目目录</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd myproject</span><br><span class="line">npm istall</span><br></pre></td></tr></table></figure><p>开启实时编译</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wepy build —watch</span><br><span class="line">|** 报错的话看是否是eslint问题  wepy.config.js -&gt; eslint: <span class="literal">false</span>,</span><br></pre></td></tr></table></figure><h4 id="需要注意几点"><a href="#需要注意几点" class="headerlink" title="需要注意几点"></a>需要注意几点</h4><p>1.使用<strong>微信开发者工具</strong>–&gt;<strong>添加项目</strong>，<strong>项目目录</strong>请选择<strong>dist</strong>目录。</p><p>2.<strong>微信开发者工具</strong>–&gt;<strong>项目</strong>–&gt;<strong>关闭ES6转ES5</strong>。</p><p>3.<strong>微信开发者工具</strong>–&gt;<strong>项目</strong>–&gt;<strong>关闭上传代码时样式自动补全。</strong></p><p>4.<strong>微信开发者工具</strong>–&gt;<strong>项目</strong>–&gt;<strong>关闭代码压缩上传</strong>。</p><p>小程序设置更改后如出现 编译.wxml文件错误重启软件即可</p><h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><p>小程序入口、页面、组件文件名的后缀为<code>.wpy</code></p><p>可以使用ES6、promise开发</p><p>事件绑定语法使用优化语法代替：</p><ul><li>原 <code>bindtap=&quot;click&quot;</code> 替换为 <code>@tap=&quot;click&quot;</code>，原<code>catchtap=&quot;click&quot;</code>替换为<a href="mailto:`@tap.stop" target="_blank" rel="noopener">`@tap.stop</a>=”click”`。</li><li>原 <code>capture-bind:tap=&quot;click&quot;</code> 替换为 <a href="mailto:`@tap.capture" target="_blank" rel="noopener">`@tap.capture</a>=”click”<code>，原</code>capture-catch:tap=”click”<code>替换为</code>@tap.capture.stop=”click”`。。</li></ul><h3 id="数据绑定方式"><a href="#数据绑定方式" class="headerlink" title="数据绑定方式"></a>数据绑定方式</h3><p>WePY使用脏数据检查对setData进行封装，在函数运行周期结束时执行脏数据检查，一来可以不用关心页面多次setData是否会有性能上的问题，二来可以更加简洁去修改数据实现绑定，不用重复去写setData方法。代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.title = <span class="string">'this is title'</span>;</span><br></pre></td></tr></table></figure><p>在我写项目时需要滑动触底刷新，当时用的定时器做数据获取模拟就出现了bug，这时</p><p><strong>需注意的是，在异步函数中更新数据的时，必须手动调用<code>$apply</code>方法，才会触发脏数据检查流程的运行</strong>。如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.title = <span class="string">'this is title'</span>;</span><br><span class="line">    <span class="keyword">this</span>.$apply();</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wepy.request(&#123;</span><br><span class="line">      url: <span class="string">"###"</span>,</span><br><span class="line">      method: <span class="string">"GET"</span>,</span><br><span class="line">      header: &#123;header&#125;,</span><br><span class="line">      success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="Component组件实例"><a href="#Component组件实例" class="headerlink" title="Component组件实例"></a>Component组件实例</h3><p>对于WePY中的methods属性，因为与Vue中的使用习惯不一致，非常容易造成误解，这里需要特别强调一下：WePY中的methods属性只能声明页面wxml标签的bind、catch事件，不能声明自定义方法，这与Vue中的用法是不一致的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误示例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wepy <span class="keyword">from</span> <span class="string">'wepy'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">wepy</span>.<span class="title">component</span> </span>&#123;</span><br><span class="line">    methods = &#123;</span><br><span class="line">        bindtap () &#123;</span><br><span class="line">            <span class="keyword">let</span> rst = <span class="keyword">this</span>.commonFunc();</span><br><span class="line">            <span class="comment">// doSomething</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        bindinput () &#123;</span><br><span class="line">            <span class="keyword">let</span> rst = <span class="keyword">this</span>.commonFunc();</span><br><span class="line">            <span class="comment">// doSomething</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">//错误：普通自定义方法不能放在methods对象中</span></span><br><span class="line">        customFunction () &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'sth.'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确示例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> wepy <span class="keyword">from</span> <span class="string">'wepy'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">wepy</span>.<span class="title">component</span> </span>&#123;</span><br><span class="line">    methods = &#123;</span><br><span class="line">        bindtap () &#123;</span><br><span class="line">            <span class="keyword">let</span> rst = <span class="keyword">this</span>.commonFunc();</span><br><span class="line">            <span class="comment">// doSomething</span></span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        bindinput () &#123;</span><br><span class="line">            <span class="keyword">let</span> rst = <span class="keyword">this</span>.commonFunc();</span><br><span class="line">            <span class="comment">// doSomething</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//正确：普通自定义方法在methods对象外声明，与methods平级</span></span><br><span class="line">    customFunction () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'sth.'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>API文档：<a href="https://tencent.github.io/wepy/document.html#/" target="_blank" rel="noopener">https://tencent.github.io/wepy/document.html#/</a></p>]]></content>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>2017年终总结</title>
      <link href="/2018/01/15/2017%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>/2018/01/15/2017%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>告别2017，喜迎2018。</p><a id="more"></a><h2 id="感恩"><a href="#感恩" class="headerlink" title="感恩"></a>感恩</h2><p>首先要说的就是感恩。在这一年，初来乍到懵懵懂懂，大环境下有时候会感到窒息。记得刚出来实习的时候要租房落脚，来来回回找了许多中介都没有合适的房子，不是价格贵就是地方太偏。在实习期间工资低的可怜，自己也没有攒钱只能给家里打call，才维持能吃饱穿暖的温饱生活。这期间也得到了老姨的帮忙，顺利的实习里几个月时间让我初入互联网行业。</p><p>总之，最要感谢家人在你困难的时候帮你渡过难关。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>五月三号入职了现在这家公司，当初手里拿着两家offer最终还是等来这家的通知，相对来说这家公司觉得更能让我快速成长。</p><p>期初公司项目多，刚过来就接了几个后台项目和新上的项目，虽然前期开发遇到了一些困难但还是咬咬牙挺了过来项目转接也算顺利。虽然加班是常态但我也尽量当天的事当天办我是极度反感拖拖拉拉的办事状态。当时距离毕业还有两个月，论文还没收工，基本上是有空就写，讲道理我这论文写得蛮走心的真的是纯手工制作，耗费大量时间去写。虽然答辩时导师问的都是一切奇葩问题但自我感觉毕设做的还是相当满意。期间还有些事需要回老家、回学校也请了不少假但也没有托工作进度还是挺顺利的吧。就这样七月份转正正式成为来京务工人员，继续搬砖继续学习。在这家公司只能靠自己，不会的查，查不到的科学上网查总之google是个好东西。这半年多学到了很多同时也知道了自己还是弱，前面的路还很长。</p><p>​    对于工作总体来说这一年收获颇丰，也认识到了以后的方向。所以说打铁还需自身硬。</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>这一年学着做了几道菜。还有就是花销状况，刚开始完全没有这个概念基本就是月光，花的飞起，后来也渐渐意识到需要攒点钱了。新的一年打算好好攒攒钱，买东西也要节制一些。不长远打算就当个旅游资金也是蛮好的。想想以后买房压力更大，所以还是节省点花销为好。</p><h4 id="总而言之"><a href="#总而言之" class="headerlink" title="总而言之"></a>总而言之</h4><p>新的一年就要有新的生活态度面对接下来的一切，有些事情也要自己学会承担、负责。</p><p>​    </p>]]></content>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Gulp自动化构建工具</title>
      <link href="/2017/06/07/gulp%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
      <url>/2017/06/07/gulp%E8%87%AA%E5%8A%A8%E5%8C%96%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<p><img src="../assets/coverImg/gulp.png" alt=""></p><p>Gulp.js 是基于 Node.js 构建的,利用 Node.js 流的威力,可以快速构建项目，</p><p>是一个自动化构建工具,开发者可以使用它在项目开发过程中自动执行常见任务。</p><a id="more"></a><h2 id="Gulp安装"><a href="#Gulp安装" class="headerlink" title="Gulp安装"></a>Gulp安装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install -g gulp   <span class="comment">// 全局安装gulp</span></span><br><span class="line">$ gulp -v      <span class="comment">// 查看gulp版本号，是否安装成功</span></span><br><span class="line">$ npm init      <span class="comment">// 创建文件夹，初始化npm(项目名称不能为gulp)</span></span><br><span class="line">$ npm install gulp —save-dev <span class="comment">// 当前文件夹安装本地gulp文件</span></span><br></pre></td></tr></table></figure><p>上述命令执行完成后需要再创建一个gulpfile.js文件来用来配置gulp。</p><h2 id="Gulp使用"><a href="#Gulp使用" class="headerlink" title="Gulp使用"></a>Gulp使用</h2><p>我使用gulp最常用的功能就是压缩css,js代码和添加css代码中兼容浏览器前缀。这三个功能分别需要安装三个gulp插件：gulp-uglify（压缩js代码）、gulp-css（压缩css代码）、gulp-autoprefixer（css兼容浏览器前缀）。所以需要通过npm来安装这三个插件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$npm install gulp-uglify --save-dev</span><br><span class="line">$npm install gulp-css --save-dev</span><br><span class="line">$npm install gulp-autoprefixer --save-dev</span><br></pre></td></tr></table></figure><p>在项目中我们需要存放我们需要压缩的代码，在项目中创建一个src文件夹，其中存放js，css文件。</p><p>​    |——src</p><p>​        |——-js</p><p>​             ——main.js</p><p>​         |——-css</p><p>​          ——main.css</p><p>​      同理我们还需要创建一个压缩代码后存放文件的文件夹。</p><p>​      |——–dist</p><p>​        |—— js</p><p>​        |——-css</p><p>​    下面就要配置gulp文件了，在刚刚创建的gulpfile.js文件中进行配置。所有配置代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'gulp-autoprefixer'</span>);</span><br><span class="line"><span class="keyword">var</span> cssMin = <span class="built_in">require</span>(<span class="string">'gulp-css'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'script'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 压缩js代码</span></span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'src/js/**/*.js'</span>)</span><br><span class="line">    .pipe(uglify()) <span class="comment">//引用插件</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/js'</span>)); <span class="comment">//存放的位置</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'css'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'src/css/**/*.css'</span>)</span><br><span class="line">    .pipe(autoprefixer(&#123;  <span class="comment">//兼容性浏览器前缀添加</span></span><br><span class="line">        browsers:[<span class="string">'last 40 versions'</span>],<span class="comment">//版本范围</span></span><br><span class="line">        cascade:<span class="literal">false</span> <span class="comment">//是否美化属性值 默认是true 这里写false不需要</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(cssMin()) <span class="comment">//引用插件</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">'./dist/css'</span>));<span class="comment">//存放的位置</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">'default'</span>,[<span class="string">'script'</span>,<span class="string">'css'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'任务完成'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果不需要兼容性前缀添加，直接将pipe(autoprefixer)任务这部分删除。其他同理。</span></span><br></pre></td></tr></table></figure><p>​    配置好gulp后就可以将代码存放在src中，通过命令来进行相应操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gulp <span class="comment">//默认全部执行</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gulp script <span class="comment">//仅压缩js代码</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gulp css <span class="comment">//仅压缩css代码</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git入门</title>
      <link href="/2017/06/05/Git%E5%85%A5%E9%97%A8/"/>
      <url>/2017/06/05/Git%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p><img src="../assets/coverImg/git.png" alt=""></p><p>Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。</p><a id="more"></a><h4 id="Git三个状态"><a href="#Git三个状态" class="headerlink" title="Git三个状态"></a>Git三个状态</h4><p>在Git中存在三个状态：工作区、暂存区、版本状态仓库。</p><p>工作区：工作区是我们在本地我们可以看得到的那一部分内容。例如在本地创建的文件夹里的文件，如果修改了文件中的内容可以通过 git status来查看是否文件有修改。</p><p>暂存区：当我们想要上传代码到git中首先要将工作区中的文件通过命令上传至git中的暂存区：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .   //add后面的.是将所有未最终的文件添加在缓存区中。.也可以使用-A代替，实现效果一样。</span><br></pre></td></tr></table></figure><p>版本管理仓库：当我们的代码上传到指定服务器中后也，git版本状态中会自动存留一条此次上传文件的版本状态。通过命令可查询：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log</span><br></pre></td></tr></table></figure><p>其中commit是版本识别标识，我们可以通过commit码来回滚到指定版本，命令如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard 80919da****    //commit码只需要输入前几位即可 git会自动识别</span><br></pre></td></tr></table></figure><h4 id="通过Git将文件提交至Github"><a href="#通过Git将文件提交至Github" class="headerlink" title="通过Git将文件提交至Github"></a>通过Git将文件提交至Github</h4><p>如果文件是第一次提交至github需要将需要上传的文件通过命令git初始化，命令如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br></pre></td></tr></table></figure><p>工作区提交到暂存区：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br></pre></td></tr></table></figure><p>将本次提交生成一个标识来帮助我们查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -m”someText”</span><br></pre></td></tr></table></figure><p>与github建立连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com：yourName / songProject.git </span><br><span class="line">//可在github创建一个库复制其git地址</span><br></pre></td></tr></table></figure><p>提交文件至github</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h4 id="更新文件"><a href="#更新文件" class="headerlink" title="更新文件"></a>更新文件</h4><p>更新文件基本与以上操作基本相似：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add.</span><br><span class="line">$ git commit -m&quot;someText&quot;</span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>如果是第一次使用git需要设置用户信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config user.name &quot;username&quot;</span><br><span class="line">$ git config user.email &quot;user@email.com&quot;</span><br></pre></td></tr></table></figure><p>查看是否设置成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config user.name </span><br><span class="line">$ git config user.email</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript闭包</title>
      <link href="/2017/04/12/JavaScript%E9%97%AD%E5%8C%85/"/>
      <url>/2017/04/12/JavaScript%E9%97%AD%E5%8C%85/</url>
      <content type="html"><![CDATA[<p>闭包算是JavaScript经常会碰到的问题。简单的说就是函数嵌套关系到作用域链的问题。</p><a id="more"></a><p>学习了一下阮一峰大神的闭包讲解，概括起来就是变量作用域，全局和局部变量的判断。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　alert(n); </span><br><span class="line">　　　　&#125;</span><br><span class="line">　　　　<span class="keyword">return</span> f2;</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="keyword">var</span> result=f1();</span><br><span class="line">　　result(); <span class="comment">// 999</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">　　<span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line">　　　　nAdd=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;n+=<span class="number">1</span>&#125;</span><br><span class="line">　　　　<span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　alert(n);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　　　<span class="keyword">return</span> f2;</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="keyword">var</span> result=f1();</span><br><span class="line">　　result(); <span class="comment">// 999</span></span><br><span class="line">　　nAdd();</span><br><span class="line">　　result(); <span class="comment">// 1000</span></span><br></pre></td></tr></table></figure><p>在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。所以在闭包中内存中会一直保存着局部变量。会占用内存，内存消耗大，对整体性能有影响。</p><p><strong>eg：</strong>绑定每个<code>span</code>的<code>click</code>事件，让鼠标点击span的时候alert出对应的index    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> spans = $(<span class="string">"#divTest span"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; spans.length; i++) &#123;</span><br><span class="line">      spans[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       alert(i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>很简单的功能可是却偏偏出错了，每次alert出的值都是4，所以然者何？</p><p>上面代码在页面加载后就会执行，当i的值为4的时候，判断条件不成立，for循环执行完毕，但是因为每个span的onclick方法这时候为内部函数，所以i被闭包引用，内存不能被销毁，i的值会一直保持4，直到程序改变它或者所有的onclick函数销毁（主动把函数赋为null或者页面卸载）时才会被回收。</p><p>这样每次我们点击span的时候，onclick函数会查找i的值（作用域链是引用方式），一查等于4，然后就alert给我们了。而第二种方式是使用了一个立即执行的函数又创建了一层闭包，函数声明放在括号内就变成了表达式，后面再加上括号就是调用了，这时候把i当参数传入，函数立即执行，num保存每次i的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> spans2 = $(<span class="string">"#divTest2 span"</span>);</span><br><span class="line">    $(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; spans2.length; i++) &#123;</span><br><span class="line">            (<span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">                spans2[i].onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    alert(num);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="逃脱"><a href="#逃脱" class="headerlink" title="逃脱"></a>逃脱</h2><p>JavaScript允许像传递任何类型的数据一样传递函数，也就是说JavaScript中的内部函数能够逃脱定义他们的外部函数。</p><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> globalVar;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outerFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Outer function"</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">innerFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Inner function"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    globalVar = innerFn;</span><br><span class="line">&#125;</span><br><span class="line">outerFn();</span><br><span class="line">globalVar();</span><br></pre></td></tr></table></figure><p>调用outerFn时会修改全局变量globalVar，这时候它的引用变为innerFn，此后调用globalVar和调用innerFn一样。这时在outerFn外部直接调用innerFn仍然会导致错误，这是因为内部函数虽然通过把引用保存在全局变量中实现了逃脱，但这个函数的名字依然只存在于outerFn的作用域中。</p><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>可以通过在父函数的返回值来获得内部函数引用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outerFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Outer function"</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">innerFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Inner function"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> innerFn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fnRef = outerFn();</span><br><span class="line">fnRef();</span><br></pre></td></tr></table></figure><p>这里并没有在outerFn内部修改全局变量，而是从outerFn中返回了一个对innerFn的引用。通过调用outerFn能够获得这个引用，而且这个引用可以可以保存在变量中。</p><h2 id="闭包的优缺点"><a href="#闭包的优缺点" class="headerlink" title="闭包的优缺点"></a>闭包的优缺点</h2><p>使用闭包主要是为了设计私有的方法和变量。闭包的优点是可以避免全局变量的污染，缺点是闭包会常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。在js中，函数即闭包，只有函数才会产生作用域的概念</p><p>闭包有三个特性：</p><blockquote><p>1.函数嵌套函数</p><p>2.函数内部可以引用外部的参数和变量</p><p>3.参数和变量不会被垃圾回收机制回收</p></blockquote>]]></content>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
